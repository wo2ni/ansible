# Ansible playbook (各种Linux发行版,初始化剧本)

---
- name: 各种Linux发行版初始化剧本(Arch,Debian,Ubuntu,Centos)
  hosts: all
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:

#Arch
    - name: 建立软件包缓存,(Arch)
      command:
        cmd: pacman -Syy
      become: yes
      become_method: sudo
      when: ansible_distribution == 'Archlinux'
    
    - name: 安装基本软件包,Docker引擎以及docker-compose (Arch)
      pacman:
        name:
          - vim
          - which
          - less
          - jq
          - bash-completion
          - iproute2
          - curl
          - lsb-release
          - wget
          - htop
          - neofetch
          - docker
          - docker-compose
          - firewalld
        state: present
        update_cache: yes
      when: ansible_distribution == 'Archlinux'

    - name: 重新载入Systemd服务 启动并开机自启Docker,Firewalld (Arch)
      shell: |
        systemctl daemon-reload &&systemctl enable --now docker.socket docker.service firewalld.service
      when: ansible_distribution == 'Archlinux'

    - name: 配置 PS1 提示符 以及 vim 配置 (Arch)
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      with_items:
        - { src: "bashrc", dest: "/root/.bashrc", owner: "root", group: "root", mode: "0644" }
        - { src: "vimrc", dest: "/root/.vimrc", owner: "root", group: "root", mode: "0644" }
        - { src: "ipinfo.sh", dest: "/usr/bin/ipinfo", owner: "root", group: "root", mode: "0755" }
      when: ansible_distribution == 'Archlinux'

    - name: 配置bashrc登陆时生效(Arch)
      lineinfile:
        path: /etc/bash.bashrc
        line: 'source ~/.bashrc'
        create: no
        state: present
      become: yes
      when: ansible_distribution == 'Archlinux'

    - name: 配置内核参数(Arch)
      copy:
        dest: /etc/sysctl.d/99-network.conf
        content: |
          net.ipv4.ip_forward = 1
          fs.file-max = 1000000
          fs.inotify.max_user_instances = 8192
          net.core.rmem_max = 67108864
          net.core.wmem_max = 67108864
          net.core.wmem_default = 2097152
          net.core.netdev_max_backlog = 10240
          net.core.somaxconn = 8192
          net.ipv4.tcp_syncookies = 1
          net.ipv4.tcp_tw_reuse = 1
          net.ipv4.tcp_fin_timeout = 30
          net.ipv4.tcp_keepalive_time = 1200
          net.ipv4.ip_local_port_range = 8192 65000
          net.ipv4.tcp_max_syn_backlog = 10240
          net.ipv4.tcp_max_tw_buckets = 5000
          net.ipv4.tcp_rmem = 16384 262144 8388608
          net.ipv4.tcp_wmem = 32768 524288 16777216
          net.ipv4.tcp_mtu_probing = 1
          net.ipv4.tcp_slow_start_after_idle = 0
          net.core.default_qdisc=fq
      become: yes
      when: ansible_distribution == 'Archlinux'

    - name: 立即生效内核参数(Arch)
      command:
        cmd: sysctl -p /etc/sysctl.d/99-network.conf
      become: yes
      become_method: sudo
      when: ansible_distribution == 'Archlinux'

    - name: 获取服务器 ip 归属地信息
      shell: ipinfo
      when: ansible_distribution == 'Archlinux'

    - name: 将网络接口添加到public防火墙区域.(Arch)
      ansible.posix.firewalld:
        zone: public
        interface: eth0
        state: enabled
        permanent: true
        immediate: true
      become: yes
      when: ansible_distribution == 'Archlinux'

    - name: 放行端口80/tcp (Arch)
      firewalld:
        port: 80/tcp
        state: enabled
        permanent: true
        immediate: true
      when: ansible_distribution == 'Archlinux'

    - name: 放行端口443/tcp (Arch)
      firewalld:
        port: 443/tcp
        state: enabled
        permanent: true
        immediate: true
      when: ansible_distribution == 'Archlinux'

    - name: 放行端口9100/tcp (Arch)
      firewalld:
        port: 9100/tcp
        state: enabled
        permanent: true
        immediate: true
      when: ansible_distribution == 'Archlinux'

#Debian
    - name: 建立软件包缓存,并安装 vim (Debian)
      apt:
        update_cache: yes
        name:
          - vim
          - jq
          - bash-completion
          - iproute2
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - wget
          - htop
        state: present
      when: ansible_distribution == 'Debian'

    - name: 配置 PS1 提示符 以及 vim 配置 (Debian)
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      with_items:
        - { src: "bashrc", dest: "/root/.bashrc", owner: "root", group: "root", mode: "0644" }
        - { src: "vimrc", dest: "/root/.vimrc", owner: "root", group: "root", mode: "0644" }
        - { src: "ipinfo.sh", dest: "/usr/bin/ipinfo", owner: "root", group: "root", mode: "0755" }
      when: ansible_distribution == 'Debian'

    - name: 获取服务器 ip 归属地信息
      shell: ipinfo
      when: ansible_distribution == 'Debian'

    - name: 添加Docker GPG 密钥 (Debian)
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
      when: ansible_distribution == 'Debian'

    - name: 添加Docker 软件仓库 (Debian)
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_lsb.codename }} stable
        state: present
      when: ansible_distribution == 'Debian'

    - name: 安装Docker引擎以及docker-compose (Debian)
      apt:
        name:
          - docker-ce
          - docker-compose
        state: present
      when: ansible_distribution == 'Debian'

    - name: 重新载入Systemd服务 启动并开机自启Docker (Debian)
      shell: |
        systemctl daemon-reload &&systemctl enable --now docker.socket docker.service
      when: ansible_distribution == 'Debian'

#Ubuntu
    - name: 建立软件包缓存,并安装 vim (Ubuntu)
      apt:
        update_cache: yes
        name:
          - vim
          - jq
          - bash-completion
          - gnupg
          - iproute2
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - wget
          - htop
        state: present
      when: ansible_distribution == 'Ubuntu'

    - name: 配置 PS1 提示符 以及 vim 配置 (Ubuntu)
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      with_items:
        - { src: "bashrc", dest: "/root/.bashrc", owner: "root", group: "root", mode: "0644" }
        - { src: "vimrc", dest: "/root/.vimrc", owner: "root", group: "root", mode: "0644" }
        - { src: "ipinfo.sh", dest: "/usr/bin/ipinfo", owner: "root", group: "root", mode: "0755" }
      when: ansible_distribution == 'Ubuntu'

    - name: 获取服务器 ip 归属地信息
      shell: ipinfo
      when: ansible_distribution == 'Ubuntu'

    - name: 添加Docker GPG 密钥 (Ubuntu)
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_distribution == 'Ubuntu'

    - name: 添加Docker 软件仓库 (Ubuntu)
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present
      when: ansible_distribution == 'Ubuntu'

    - name: 安装 Docker引擎以及docker-compose (Ubuntu)
      apt:
        name: 
          - docker-ce
          - docker-compose
        state: present
      when: ansible_distribution == 'Ubuntu'

    - name: 重新载入Systemd服务 启动并开机自启Docker (Ubuntu)
      shell: |
        systemctl daemon-reload &&systemctl enable --now docker.socket docker.service
      when: ansible_distribution == 'Ubuntu'

# Centos 
    - name: 建立 Centos Base 软件包缓存 (Centos)
      yum:
        name: ''
        state: present
      when: ansible_distribution == 'CentOS'

    - name: 安装基本生产力软件包 (CentOS)
      yum:
        name:
          - epel-release
          - jq
          - bash-completion
          - vim
          - iproute
          - curl
          - wget
        state: present
      when: ansible_distribution == 'CentOS'

    - name: 建立 EPEL源 软件包缓存 (Centos)
      yum:
        name: ''
        state: present
      when: ansible_distribution == 'CentOS'

    - name: 安装 EPEL源 软件包 (CentOS)
      yum:
        name:
          - htop
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
        state: present
      when: ansible_distribution == 'CentOS'

    - name: 配置 PS1 提示符 以及 vim 配置 (Centos)
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      with_items:
        - { src: "bashrc", dest: "/root/.bashrc", owner: "root", group: "root", mode: "0644" }
        - { src: "vimrc", dest: "/root/.vimrc", owner: "root", group: "root", mode: "0644" }
        - { src: "ipinfo.sh", dest: "/usr/bin/ipinfo", owner: "root", group: "root", mode: "0700" }
      when: ansible_distribution == 'CentOS'

    - name: 获取服务器 ip 归属地信息
      shell: ipinfo
      when: ansible_distribution == 'Centos'

    - name: 添加 Docker CE 仓库 (Centos)
      yum_repository:
        name: docker-ce
        description: Docker CE repo
        baseurl: https://download.docker.com/linux/centos/7/$basearch/stable
        gpgcheck: yes
        gpgkey: https://download.docker.com/linux/centos/gpg
        enabled: yes
      when: ansible_distribution == 'CentOS'

    - name: 建立Docker yum makecache (Centos)
      yum:
        name: ''
        state: present
      when: ansible_distribution == 'CentOS'

    - name: 安装 Docker引擎以及docker-compose (Centos)
      yum:
        name:
          - docker-ce
          - docker-compose
        state: present
      when: ansible_distribution == 'CentOS'

    - name: 重新载入Systemd服务
      systemd:
        daemon_reload: yes
      when: ansible_distribution == 'CentOS'

    - name: 重新载入Systemd服务 启动并开机自启Docker (Ubuntu)
      shell: |
        systemctl daemon-reload &&systemctl enable --now docker.socket docker.service
      when: ansible_distribution == 'CentOS'
